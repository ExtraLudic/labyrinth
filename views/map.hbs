<script src="https://cdnjs.cloudflare.com/ajax/libs/gojs/1.8.8/go-debug.js"></script>  
<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>
<script>
$(document).ready(function() {
  var data = {{{jsonPrint data}}};
  init(data);
  
function init(data) {
    var $ = go.GraphObject.make;  // for conciseness in defining templates

    myDiagram =
      $(go.Diagram, "map", // must be the ID or reference to div
        {
          initialAutoScale: go.Diagram.Uniform,
          padding: 10,
          contentAlignment: go.Spot.Center,
          maxSelectionCount: 2, 
          layout: $(go.GridLayout,
                        { comparer: go.GridLayout.smartComparer })
        });

    // define the Node template
    myDiagram.nodeTemplate =
      $(go.Node, "Spot",
        { 
          locationSpot: go.Spot.Center,  // Node.location is the center of the Shape
          locationObjectName: "SHAPE",
          selectionAdorned: false, 
          selectable: false,
          click: function(e, node) { 
            showConnections(node);
          }
        },
        $(go.Panel, "Auto",
          $(go.Shape, "Ellipse",
            { name: "SHAPE",
              fill: "lightgray",  // default value, but also data-bound
              stroke: "black",  // modified by highlighting
              strokeWidth: 2,
              desiredSize: new go.Size(30, 30),
              portId: "" },  // so links will go to the shape, not the whole node
            new go.Binding("fill", "color"),
            new go.Binding("stroke", "isSelected", function(s, obj) { return s ? "yellow" : "black" }).ofObject())
         ),
        $(go.TextBlock,
          new go.Binding("text")));
  
    // Group template
    myDiagram.groupTemplate =
      $(go.Group, "Vertical",
        {
            layout: $(go.CircularLayout)
        },
        $(go.Panel, "Auto",
          $(go.Shape, "RoundedRectangle",  // surrounds the Placeholder
            { parameter1: 14,
              fill: "transparent", 
              stroke: "transparent" 
            }),
          $(go.Placeholder,    // represents the area of all member parts,
            { padding: 5})  // with some extra padding around them
        ),
        $(go.TextBlock,         // group title
          { alignment: go.Spot.Right, font: "Bold 12pt Sans-Serif" },
          new go.Binding("text", "key"))
      );


    // define the Link template
    myDiagram.linkTemplate =
      $(go.Link,
        {
          selectable: false,      // links cannot be selected by the user
          curve: go.Link.Bezier,
          layerName: "Background"  // don't cross in front of any nodes
        },
        $(go.Shape,  // this shape only shows when it isHighlighted
          { toArrow: "Triangle", isPanelMain: true, stroke: null, strokeWidth: 3 },
          new go.Binding("fill", "isHighlighted", function(h) { return h ? "black" : null; }).ofObject(),
          new go.Binding("stroke", "isHighlighted", function(h) { return h ? "black" : null; }).ofObject()),
        $(go.Shape,
          // mark each Shape to get the link geometry with isPanelMain: true
          { isPanelMain: true, stroke: "black", strokeWidth: 1 },
          new go.Binding("stroke", "color")),
        $(go.Shape, { toArrow: "Triangle" }, 
           new go.Binding("stroke", "isHighlighted", function(h) { return h ? "black" : null; }).ofObject(), 
           new go.Binding("fill", "isHighlighted", function(h) { return h ? "black" : null; }).ofObject())
      );

    generateGraph();
  
  }

  function generateGraph() {
    var names = [];

    _.each(data.puzzles, function(puzzle, i) {
      console.log("puzzle: ", puzzle);
      puzzle.galaxy = puzzle.room.split("_")[0] + "_" + puzzle.room.split("_")[1];
      names.push(puzzle);
    });
    
    console.log(names, " the rooms");
    
    var linkDataArray = [];
    var nodeDataArray = [];
    
    for (var i = 0; i < names.length; i++) {
      nodeDataArray.push({ 
        key: names[i].room, 
        text: names[i].room.split("_")[3], 
        color: names[i].dev ? "lightgrey" : names[i].locked ? "red" : "green",
        group: names[i].galaxy, 
        layer: names[i].center ? 0 : names[i].blackhole ? 2 : 1, 
        locked: names[i].locked, 
        dev: names[i].dev
      });
      
      if (_.findWhere(nodeDataArray, { key: names[i].galaxy.split("_")[0] + "_" + names[i].galaxy.split("_")[1] }) == undefined) {
        nodeDataArray.push({
          key: names[i].galaxy.split("_")[0] + "_" + names[i].galaxy.split("_")[1], 
          text: names[i].galaxy.split("_")[0] + "_" + names[i].galaxy.split("_")[1], 
          isGroup:true
        });
      }
    }
    
    // For each node, find the room and add the associated links
    _.each(nodeDataArray, function(node, i) {
      if (!node.isGroup) {
        var room = _.findWhere(names, { room: node.key });
        _.each(room.links, function(link, j) {
          linkDataArray.push({ 
            from: room.room, 
            to: findGalaxy(nodeDataArray, parseInt(link)) + "_Room_" + parseInt(link), 
            color: room.dev ? "lightgrey" : room.locked ? "transparent" : "lightgrey",
            fill: room.dev ? "lightgrey" : room.locked ? "transparent" : "lightgrey"
          });
        });
      }
    });
    
    console.log("linkDataArray: ", linkDataArray);

    myDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);
    
    doubleCircleLayout(myDiagram);
  }

  
  
  function doubleCircleLayout(diagram) {
    var $ = go.GraphObject.make;  // for conciseness in defining templates
    diagram.startTransaction("Multi Circle Layout");

    var radius = 100;
    var layer = 1;
    var nodes = null;
    while (nodes = nodesByLayer(diagram, layer), nodes.count > 0) {
      var layout = $(go.CircularLayout,
                     { radius: radius });
      layout.doLayout(nodes);
      // recenter at (0, 0)
      var cntr = layout.actualCenter;
      diagram.moveParts(nodes, new go.Point(-cntr.x, -cntr.y));
      // next layout uses a larger radius
      radius += 100;
      layer++;
    }

    nodesByLayer(diagram, 0).each(function(n) { n.location = new go.Point(0, 0); });

    diagram.commitTransaction("Multi Circle Layout");
  }

  function nodesByLayer(diagram, layer) {
    var set = new go.Set(go.Node);
    diagram.nodes.each(function(part) {
      if (part instanceof go.Node && part.data.layer === layer) set.add(part);
    });
    return set;
  }

    // highlight all Links and Nodes coming out of a given Node
  function showConnections(node) {
    var diagram = node.diagram;
    
    if (!node.Rd.locked || node.Rd.dev) {
      diagram.startTransaction("highlight");
      // remove any previous highlighting
      diagram.clearHighlighteds();
      // for each Link coming out of the Node, set Link.isHighlighted
      node.findLinksOutOf().each(function(l) { l.isHighlighted = true; });
      
      diagram.commitTransaction("highlight");
    }
  }
  
  myDiagram.commandHandler.doKeyDown = function() {
      var e = myDiagram.lastInput;
      var cmd = myDiagram.commandHandler;
        console.log("key: ", e.key);

      if (e.key === e.Delete || e.key === "Backspace" ) {  // could also check for e.control or e.shift
        return;
      } else {
        // call base method with no arguments
        go.CommandHandler.prototype.doKeyDown.call(cmd);
      }
    };
  });
  
  function findGalaxy(data, num) {
    
    var thesePuzzles = _.pluck(data, "text");
    var thisPuzzle = thesePuzzles.indexOf(num.toString());
    if (thisPuzzle >= 0) 
      return data[thisPuzzle].group;
    else return 0;
    
  };
  
  
</script>



<div class="hero">

    <h1>Here is your team map.</h1>

    <div id="myPaths"></div>
  
 

    <div id="map" style="border: solid 1px black; background: white; width: 100%; height: 700px"></div>
<!--     
    <button id="zoomin">
      +
    </button>

    <button id="zoomout">
      -
    </button> -->
  
</div>
