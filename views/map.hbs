<script src="https://cdnjs.cloudflare.com/ajax/libs/gojs/1.8.8/go-debug.js"></script>  
<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>
<script>
$(document).ready(function() {
  var data = {{{jsonPrint data}}};
  init(data);
  
function init(data) {
    var $ = go.GraphObject.make;  // for conciseness in defining templates

    myDiagram =
      $(go.Diagram, "map", // must be the ID or reference to div
        {
          initialAutoScale: go.Diagram.UniformToFill,
          padding: 10,
          contentAlignment: go.Spot.Center,
          layout: $(go.CircularLayout),
          maxSelectionCount: 2
        });

    // define the Node template
    myDiagram.nodeTemplate =
      $(go.Node, "Spot",
        { 
          locationSpot: go.Spot.Center,  // Node.location is the center of the Shape
          locationObjectName: "SHAPE",
          selectionAdorned: false
        },
        $(go.Panel, "Auto",
          $(go.Shape, "Ellipse",
            { name: "SHAPE",
              fill: "lightgray",  // default value, but also data-bound
              stroke: "transparent",  // modified by highlighting
              strokeWidth: 2,
              desiredSize: new go.Size(30, 30),
              portId: "" },  // so links will go to the shape, not the whole node
            new go.Binding("fill", "color"),
            new go.Binding("stroke", "isSelected", function(s, obj) { return s ? "black" : null }).ofObject())
         ),
        $(go.TextBlock,
          new go.Binding("text")));

    // define the Link template
    myDiagram.linkTemplate =
      $(go.Link,
        {
          selectable: false,      // links cannot be selected by the user
          curve: go.Link.Bezier,
          layerName: "Background"  // don't cross in front of any nodes
        },
        $(go.Shape,  // this shape only shows when it isHighlighted
          { isPanelMain: true, stroke: null, strokeWidth: 5 },
          new go.Binding("stroke", "isHighlighted", function(h) { return h ? "black" : null; }).ofObject()),
        $(go.Shape,
          // mark each Shape to get the link geometry with isPanelMain: true
          { isPanelMain: true, stroke: "black", strokeWidth: 1 },
          new go.Binding("stroke", "color")),
        $(go.Shape, { toArrow: "Triangle"}, 
           new go.Binding("stroke", "color"), 
           new go.Binding("fill", "fill"))
      );
  
  

    // Override the clickSelectingTool's standardMouseSelect
    // If less than 2 nodes are selected, always add to the selection
    myDiagram.toolManager.clickSelectingTool.standardMouseSelect = function() {
      var diagram = this.diagram;
      if (diagram === null || !diagram.allowSelect) return;
      var e = diagram.lastInput;
      var count = diagram.selection.count;
      var curobj = diagram.findPartAt(e.documentPoint, false);
      if (curobj !== null) {
        if (count < 1) {  // add the part to the selection
          if (!curobj.isSelected) {
            var part = curobj;
            if (part !== null) part.isSelected = true;
          }
        } else {
          if (!curobj.isSelected) {
            var part = curobj;
            if (part !== null) diagram.select(part);
            highlightLinks(part);
          }
        }
      } else if (e.left && !(e.control || e.meta) && !e.shift) {
        // left click on background with no modifier: clear selection
        diagram.clearSelection();
      } 
    }

    generateGraph();
  
  }

  function generateGraph() {
    var names = [];

    _.each(data.puzzles, function(puzzle, i) {
      console.log("puzzle: ", puzzle);
      puzzle.galaxy = puzzle.room.split("_room")[0];
      names.push(puzzle);
    });
    
    console.log(names, " the rooms");
    
    var linkDataArray = [];
    var nodeDataArray = [];
    
    for (var i = 0; i < names.length; i++) {
      nodeDataArray.push({ 
        key: names[i].room, 
        text: names[i].room, 
        color: names[i].dev ? "lightgrey" : names[i].locked ? "red" : "green",
        group: names[i].galaxy.split("_")[0] + " " + names[i].galaxy.split("_")[1], 
        layer: names[i].room.split("_")[3] % 10 == 0 ? 0 : 1
      });
      
      if (_.findWhere(nodeDataArray, { key: names[i].galaxy.split("_")[0] + " " + names[i].galaxy.split("_")[1] }) == undefined) {
        nodeDataArray.push({
          key: names[i].galaxy.split("_")[0] + " " + names[i].galaxy.split("_")[1], 
          text: names[i].galaxy.split("_")[0] + " " + names[i].galaxy.split("_")[1], 
          isGroup:true
        });
      }
    }
    
    // For each node, find the room and add the associated links
    _.each(nodeDataArray, function(node, i) {
      if (!node.isGroup) {
        var room = _.findWhere(names, { room: node.key });
        _.each(room.links, function(link, j) {
          linkDataArray.push({ 
            from: room.room, 
            to: room.galaxy + "_room_" + parseInt(link), 
            color: room.dev ? "black" : room.locked ? "transparent" : "black",
            fill: room.dev ? "black" : room.locked ? "transparent" : "black"
          });
        });
      }
    });
    
    console.log("linkDataArray: ", linkDataArray);

    myDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);
    
    doubleCircleLayout(myDiagram);
  }

  
  
  function doubleCircleLayout(diagram) {
    var $ = go.GraphObject.make;  // for conciseness in defining templates
    diagram.startTransaction("Multi Circle Layout");

    var radius = 100;
    var layer = 1;
    var nodes = null;
    while (nodes = nodesByLayer(diagram, layer), nodes.count > 0) {
      var layout = $(go.CircularLayout,
                     { radius: radius });
      layout.doLayout(nodes);
      // recenter at (0, 0)
      var cntr = layout.actualCenter;
      diagram.moveParts(nodes, new go.Point(-cntr.x, -cntr.y));
      // next layout uses a larger radius
      radius += 100;
      layer++;
    }

    nodesByLayer(diagram, 0).each(function(n) { n.location = new go.Point(0, 0); });

    diagram.commitTransaction("Multi Circle Layout");
  }

  function nodesByLayer(diagram, layer) {
    var set = new go.Set(go.Node);
    diagram.nodes.each(function(part) {
      if (part instanceof go.Node && part.data.layer === layer) set.add(part);
    });
    return set;
  }


  // Highlight links outgoing from a node
  function highlightLinks(node) {
    myDiagram.clearHighlighteds();
    var outNodes = node.findNodesOutOf();
    _.each(outNodes, function(linkedNode) {
      node.findLinksTo(linkedNode).each(
        function(l) { l.isHighlighted = true; }
      );
    });
  } 
  
  myDiagram.commandHandler.doKeyDown = function() {
      var e = myDiagram.lastInput;
      var cmd = myDiagram.commandHandler;
        console.log("key: ", e.key);

      if (e.key === e.Delete || e.key === "Backspace" ) {  // could also check for e.control or e.shift
        return;
      } else {
        // call base method with no arguments
        go.CommandHandler.prototype.doKeyDown.call(cmd);
      }
    };

  
  });
</script>



<div class="hero">

    <h1>Here is your team map.</h1>

    {{{jsonPrint data}}}

    <div id="myPaths"></div>

    <div id="map" style="border: solid 1px black; background: white; width: 100%; height: 700px"></div>

</div>
